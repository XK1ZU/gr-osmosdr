/* -*- c++ -*- */
/*
 * Copyright 2013 Dimitri Stolnikov <horiz0n@gmx.net>
 * Copyright 2014 Hoernchen <la@tfc-server.de>
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdexcept>
#include <iostream>
#include <algorithm>

#include <boost/assign.hpp>
#include <boost/format.hpp>
#include <boost/detail/endian.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/thread/thread.hpp>

#include <gnuradio/io_signature.h>

#include "pciesdr_sink_c.h"

#include "arg_helpers.h"

using namespace boost::assign;

#define BUF_LEN  (16 * 32 * 512) /* must be multiple of 512 */
#define BUF_NUM   15
#define HACKRF_SUCCESS 0

#define BYTES_PER_SAMPLE  2 /* HackRF device consumes 8 bit unsigned IQ data */

static long gcd(long a, long b)
{
  if (a == 0)
    return b;
  else if (b == 0)
    return a;

  if (a < b)
    return gcd(a, b % a);
  else
    return gcd(b, a % b);
}

static inline MultiSDRState *pciesdr_open(const char *args)
{
  return msdr_open(args);
}

static inline void pciesdr_close(MultiSDRState *_dev)
{
  msdr_close(_dev);
}

static inline int pciesdr_stop_tx(MultiSDRState *_dev)
{
  return msdr_stop(_dev);
}

int pciesdr_sink_c::_usage = 0;
boost::mutex pciesdr_sink_c::_usage_mutex;

pciesdr_sink_c_sptr make_pciesdr_sink_c (const std::string & args)
{
  return gnuradio::get_initial_sptr(new pciesdr_sink_c (args));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr::block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 0 input and 1 output.
 */
static const int MIN_IN = 1;  // mininum number of input streams
static const int MAX_IN = 1;  // maximum number of input streams
static const int MIN_OUT = 0;  // minimum number of output streams
static const int MAX_OUT = 0;  // maximum number of output streams

/*
 * The private constructor
 */
pciesdr_sink_c::pciesdr_sink_c (const std::string &args)
  : gr::sync_block ("pciesdr_sink_c",
        gr::io_signature::make(MIN_IN, MAX_IN, sizeof (gr_complex)),
        gr::io_signature::make(MIN_OUT, MAX_OUT, sizeof (gr_complex))),
    _dev(NULL),
    //_buf(NULL),
    _sample_rate(0),
    _center_freq(0),
    _freq_corr(false),
    _auto_gain(false),
    _amp_gain(0),
    _vga_gain(0),
    _bandwidth(0)
{
  std::cerr << "pciesdr_sink_c::pciesdr_sink_c " << std::endl;

  std::string pciesdr_args;
  dict_t dict = params_to_dict(args);

  if (dict.count("args") && dict["args"].length() > 0) {
    pciesdr_args = dict["args"];
    // remove last bracket
    pciesdr_args = pciesdr_args.substr(0, pciesdr_args.find_last_of(']'));
  }

  std::cerr << pciesdr_args << std::endl;

  timestamp_tx = 0;

  _dev = pciesdr_open(pciesdr_args.c_str());

  if (_dev == NULL) {
    throw std::runtime_error("PCIESDR creating failed, device ");
  }
  
  // prefil startup parameters
  msdr_set_default_start_params(_dev, &StartParams);

  StartParams.interface_type = SDR_INTERFACE_RF;
  StartParams.sync_source = SDR_SYNC_NONE;
  StartParams.clock_source = SDR_CLOCK_INTERNAL;

  StartParams.sample_rate_num[0] = 1.5e6;
  StartParams.sample_rate_den[0] = 1;
  StartParams.tx_freq[0] = 1500e6;
  StartParams.rx_freq[0] = 1500e6;

  StartParams.rx_channel_count = 1;
  StartParams.tx_channel_count = 1;
  StartParams.tx_gain[0] = 40;
  StartParams.tx_bandwidth[0] = 1e4;
  StartParams.rf_port_count = 1;
  StartParams.tx_port_channel_count[0] = 1;
  StartParams.rx_port_channel_count[0] = 1;

  set_center_freq( (get_freq_range().start() + get_freq_range().stop()) / 2.0 );
  set_sample_rate( get_sample_rates().start() );
  //set_bandwidth( 0 );

  //set_gain( 0 ); /* disable AMP gain stage by default to protect full sprectrum pre-amp from physical damage */

  //set_if_gain( 16 ); /* preset to a reasonable default (non-GRC use case) */

}

/*
 * Our virtual destructor.
 */
pciesdr_sink_c::~pciesdr_sink_c ()
{
  if (_dev) {
    pciesdr_close(_dev);
  }

}

int pciesdr_sink_c::pciesdr_set_freq(MultiSDRState *_dev, uint64_t corr_freq)
{
  std::cerr << "pciesdr_set_freq " << corr_freq << std::endl;
  if (corr_freq < 70e6 || corr_freq > 6000e6) {
    std::cerr << "pciesdr_set_freq freq is out of range" << std::endl;
    return 1;
  }
  StartParams.tx_freq[0] = corr_freq;
  return 0;
}

int pciesdr_sink_c::pciesdr_set_sample_rate(MultiSDRState *_dev, double rate)
{
  if (rate < 400e3 || rate > 25e6) {
    std::cerr << "pciesdr_set_sample_rate: sample rate is out of range" << std::endl;
    return 1;
  }
  double integral = std::floor(rate);
  double frac = rate - integral;

  const long precision = 1000000000; // This is the accuracy

  long gcd_ = gcd(round(frac * precision), precision);

  long denominator = precision / gcd_;
  long numerator = round(frac * precision) / gcd_;
  
  std::cout << integral * denominator + numerator << " / " << denominator << std::endl;
  StartParams.sample_rate_num[0] = (int64_t)(integral * denominator + numerator);
  StartParams.sample_rate_den[0] = denominator;

  return 0;
}

void pciesdr_sink_c::_pciesdr_wait(pciesdr_sink_c *obj)
{
  obj->pciesdr_wait();
}

void pciesdr_sink_c::pciesdr_wait()
{
}

bool pciesdr_sink_c::start()
{
  int ret;
  SDRStats stats;
  SDRStartParams StartParams_tmp = this->StartParams;

  std::cerr << "pciesdr_sink_c::start f: " << StartParams_tmp.tx_freq[0] << std::endl;
  std::cerr << "pciesdr_sink_c::start n: " << StartParams_tmp.sample_rate_num[0] << std::endl;
  std::cerr << "pciesdr_sink_c::start d: " << StartParams_tmp.sample_rate_den[0] << std::endl;
  if ( ! _dev )
    return false;

  ret = msdr_start(_dev, &StartParams_tmp);
  if (ret) {
    std::cerr << "Failed to start TX streaming" << std::endl;
    return false;
  }
  std::cerr << "msdr_start:started" << std::endl;
  ret = msdr_get_stats(_dev, &stats);
  if (ret) {
    std::cerr << "msdr_get_stats failed" << std::endl;
    return false;
  }

  timestamp_tx = 0;
  return true;
}

bool pciesdr_sink_c::stop()
{
  if ( ! _dev )
    return false;

  int ret = pciesdr_stop_tx( _dev );
  if (ret) {
    std::cerr << "Failed to stop TX streaming (" << ret << ")" << std::endl;
    return false;
  }

  return true;
}

void convert_default(float* inbuf, int8_t* outbuf,const unsigned int count)
{
  for(unsigned int i=0; i<count;i++){
    outbuf[i]= inbuf[i]*127;
  }
}

int pciesdr_sink_c::work( int noutput_items,
                         gr_vector_const_void_star &input_items,
                         gr_vector_void_star &output_items )
{
  int chan = 0;
  int rc;
  int64_t hw_time;
  int64_t timestamp_tmp = 0;

  if (!timestamp_tx) {
    // get current tx timestamp from SDR
    rc = msdr_write(_dev, timestamp_tmp, (const void**)NULL, 0, 0, &hw_time);
    if (rc < 0) {
      std::cerr << "Failed write into TX stream" << std::endl;
      return 0;
    }
    timestamp_tx = hw_time;
  }

  static sample_t *psamples = (sample_t *) input_items[0];
  rc = msdr_write(_dev, timestamp_tx, (const void**)&psamples, noutput_items, chan, &hw_time);
  if (rc < 0) {
    std::cerr << "Failed write into TX stream" << std::endl;
    return 0;
  }
  timestamp_tx += rc;
  // Tell runtime system how many output items we produced.

  return rc;
}

std::vector<std::string> pciesdr_sink_c::get_devices()
{
  std::vector<std::string> devices;
  std::string label;
  devices.push_back( "dev0=/dev/sdr2" );

  return devices;
}

size_t pciesdr_sink_c::get_num_channels()
{
  return 1;
}

osmosdr::meta_range_t pciesdr_sink_c::get_sample_rates()
{
  osmosdr::meta_range_t range;

  /* we only add integer rates here because of better phase noise performance.
   * the user is allowed to request arbitrary (fractional) rates within these
   * boundaries. */

  range += osmosdr::range_t( 400e3 );
  range += osmosdr::range_t( 500e3 );
  range += osmosdr::range_t( 1.0e6 );
  range += osmosdr::range_t( 1.5e6 );
  range += osmosdr::range_t( 2.0e6 ); /* confirmed to work on fast machines */

  return range;
}

double pciesdr_sink_c::set_sample_rate( double rate )
{
  int ret;

  if (_dev) {
    ret = pciesdr_set_sample_rate( _dev, rate );
    if (!ret) {
      _sample_rate = rate;
      //set_bandwidth( 0.0 ); /* bandwidth of 0 means automatic filter selection */
    }
  }

  return get_sample_rate();
}

double pciesdr_sink_c::get_sample_rate()
{
  return _sample_rate;
}

osmosdr::freq_range_t pciesdr_sink_c::get_freq_range( size_t chan )
{
  osmosdr::freq_range_t range;

  range += osmosdr::range_t( _sample_rate / 2, 7250e6 - _sample_rate / 2 );

  return range;
}

double pciesdr_sink_c::set_center_freq( double freq, size_t chan )
{
  int ret;

  #define APPLY_PPM_CORR(val, ppm) ((val) * (1.0 + (ppm) * 0.000001))

  if (_dev) {
    double corr_freq = APPLY_PPM_CORR( freq, _freq_corr );
    ret = pciesdr_set_freq( _dev, uint64_t(corr_freq) );
    if ( HACKRF_SUCCESS == ret ) {
      _center_freq = freq;
    }
  }

  return get_center_freq( chan );
}

double pciesdr_sink_c::get_center_freq( size_t chan )
{
  return _center_freq;
}

double pciesdr_sink_c::set_freq_corr( double ppm, size_t chan )
{
  _freq_corr = ppm;

  set_center_freq( _center_freq );

  return get_freq_corr( chan );
}

double pciesdr_sink_c::get_freq_corr( size_t chan )
{
  return _freq_corr;
}

std::vector<std::string> pciesdr_sink_c::get_gain_names( size_t chan )
{
  std::vector< std::string > names;

  names += "RF";
  names += "IF";

  return names;
}

osmosdr::gain_range_t pciesdr_sink_c::get_gain_range( size_t chan )
{
  return get_gain_range( "RF", chan );
}

osmosdr::gain_range_t pciesdr_sink_c::get_gain_range( const std::string & name, size_t chan )
{
  if ( "RF" == name ) {
    return osmosdr::gain_range_t( 0, 14, 14 );
  }

  if ( "IF" == name ) {
    return osmosdr::gain_range_t( 0, 47, 1 );
  }

  return osmosdr::gain_range_t();
}

bool pciesdr_sink_c::set_gain_mode( bool automatic, size_t chan )
{
  _auto_gain = automatic;

  return get_gain_mode(chan);
}

bool pciesdr_sink_c::get_gain_mode( size_t chan )
{
  return _auto_gain;
}

double pciesdr_sink_c::set_gain( double gain, size_t chan )
{
  int ret;
  osmosdr::gain_range_t rf_gains = get_gain_range( "RF", chan );

  if (_dev) {
    double clip_gain = rf_gains.clip( gain, true );
    uint8_t value = clip_gain == 14.0f ? 1 : 0;
/*
    ret = pciesdr_set_amp_enable( _dev, value );
    if ( HACKRF_SUCCESS == ret ) {
      _amp_gain = clip_gain;
    }
*/
ret = 0;
  }

  return _amp_gain;
}

double pciesdr_sink_c::set_gain( double gain, const std::string & name, size_t chan)
{
  if ( "RF" == name ) {
    return set_gain( gain, chan );
  }

  if ( "IF" == name ) {
    return set_if_gain( gain, chan );
  }

  return set_gain( gain, chan );
}

double pciesdr_sink_c::get_gain( size_t chan )
{
  return _amp_gain;
}

double pciesdr_sink_c::get_gain( const std::string & name, size_t chan )
{
  if ( "RF" == name ) {
    return get_gain( chan );
  }

  if ( "IF" == name ) {
    return _vga_gain;
  }

  return get_gain( chan );
}

double pciesdr_sink_c::set_if_gain( double gain, size_t chan )
{
  int ret;
  osmosdr::gain_range_t if_gains = get_gain_range( "IF", chan );

  if (_dev) {
    double clip_gain = if_gains.clip( gain, true );
/*
    ret = pciesdr_set_txvga_gain( _dev, uint32_t(clip_gain) );
    if ( HACKRF_SUCCESS == ret ) {
      _vga_gain = clip_gain;
    } else {
      HACKRF_THROW_ON_ERROR( ret, HACKRF_FUNC_STR( "pciesdr_set_txvga_gain", clip_gain ) )
    }
*/
  }

  return _vga_gain;
}

double pciesdr_sink_c::set_bb_gain( double gain, size_t chan )
{
  return 0;
}

std::vector< std::string > pciesdr_sink_c::get_antennas( size_t chan )
{
  std::vector< std::string > antennas;

  antennas += get_antenna( chan );

  return antennas;
}

std::string pciesdr_sink_c::set_antenna( const std::string & antenna, size_t chan )
{
  return get_antenna( chan );
}

std::string pciesdr_sink_c::get_antenna( size_t chan )
{
  return "TX/RX";
}

double pciesdr_sink_c::set_bandwidth( double bandwidth, size_t chan )
{
//  osmosdr::freq_range_t bandwidths = get_bandwidth_range( chan );

  if ( bandwidth == 0.0 ) /* bandwidth of 0 means automatic filter selection */
    bandwidth = _sample_rate * 0.75; /* select narrower filters to prevent aliasing */

 // if ( _dev ) {
    /* compute best default value depending on sample rate (auto filter) */
    //uint32_t bw = pciesdr_compute_baseband_filter_bw( uint32_t(bandwidth) );
    
    //ret = pciesdr_set_baseband_filter_bandwidth( _dev, bw );
/*
    if ( HACKRF_SUCCESS == ret ) {
      _bandwidth = bw;
    } else {
      HACKRF_THROW_ON_ERROR( ret, HACKRF_FUNC_STR( "pciesdr_set_baseband_filter_bandwidth", bw ) )
    }
  }
*/
  _bandwidth = 1e6;
  return _bandwidth;
}

double pciesdr_sink_c::get_bandwidth( size_t chan )
{
  return _bandwidth;
}

osmosdr::freq_range_t pciesdr_sink_c::get_bandwidth_range( size_t chan )
{
  osmosdr::freq_range_t bandwidths;

  // TODO: read out from libhackrf when an API is available

  bandwidths += osmosdr::range_t( 1750000 );
  bandwidths += osmosdr::range_t( 2500000 );
  bandwidths += osmosdr::range_t( 3500000 );
  bandwidths += osmosdr::range_t( 5000000 );
  bandwidths += osmosdr::range_t( 5500000 );
  bandwidths += osmosdr::range_t( 6000000 );
  bandwidths += osmosdr::range_t( 7000000 );
  bandwidths += osmosdr::range_t( 8000000 );
  bandwidths += osmosdr::range_t( 9000000 );
  bandwidths += osmosdr::range_t( 10000000 );
  bandwidths += osmosdr::range_t( 12000000 );
  bandwidths += osmosdr::range_t( 14000000 );
  bandwidths += osmosdr::range_t( 15000000 );
  bandwidths += osmosdr::range_t( 20000000 );
  bandwidths += osmosdr::range_t( 24000000 );
  bandwidths += osmosdr::range_t( 28000000 );

  return bandwidths;
}
